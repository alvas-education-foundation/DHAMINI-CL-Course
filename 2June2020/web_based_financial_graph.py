# -*- coding: utf-8 -*-
"""Web-based Financial Graph.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j8COrLB0EyakvZKTnj9VNuSTgZP4GeA6
"""

cd .. 
cd  Desktop 
dir
python Mock_Portfolio_Dash.py

merged_portfolio_sp_latest_YTD_sp_closing_high.to_csv('analyzed_portfolio.csv')

app = dash.Dash()

html.H1('YTD and Total Position Returns versus S&P 500'),
		dcc.Graph(id='ytd1',
                figure = {'data':[
                            go.Bar(
    				x = data['Ticker'][0:20],
    				y = data['Share YTD'][0:20],
    					name = 'Ticker YTD'),
    		go.Scatter(
				x = data['Ticker'][0:20],
				y = data['SP 500 YTD'][0:20],
				name = 'SP500 YTD')
                            ],
               'layout':go.Layout(title='YTD Return vs S&P 500 YTD',
                            barmode='group', 
                            xaxis = {'title':'Ticker'},
                            yaxis = {'title':'Returns', 'tickformat':".2%"}
                            )}, style={'width': '50%', 'display':'inline-block'}
                            )

html.H1('Relative Returns Comparison'),
	html.Div([html.H3('Enter a stock symbol:', style={'paddingRight': '30px'}),
		dcc.Dropdown(
			id='my_ticker_symbol',
			options = options,
			value = ['SPY'], 
			multi = True
			# style={'fontSize': 24, 'width': 75}
			)	]

@app.callback(Output('my_graph', 'figure'),
			[Input('submit-button', 'n_clicks')],
			[State('my_ticker_symbol', 'value'),
			State('my_date_picker', 'start_date'),
			State('my_date_picker', 'end_date')
				])
def update_graph(n_clicks, stock_ticker, start_date, end_date):
	start = datetime.strptime(start_date[:10], '%Y-%m-%d')
	end = datetime.strptime(end_date[:10], '%Y-%m-%d')
	traces = []
	for tic in stock_ticker:
		df = web.DataReader(tic, 'iex', start, end)
		traces.append({'x':df.index, 'y':(df['close']/df['close'].iloc[0])-1, 'name': tic})
	
	fig = {
		'data': traces,
		'layout': {'title':stock_ticker}
	}
	return fig
if __name__ == '__main__':
    app.run_server()